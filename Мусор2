Eugene, [15.02.2025 22:45]
import os
import cv2
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
from PIL import Image
from telebot import TeleBot, types

# === НАСТРОЙКИ ===
EPOCHS = 5  # Количество эпох для обучения
BATCH_SIZE = 16  # Размер батча
LEARNING_RATE = 0.001  # Скорость обучения
MODEL_PATH = "model.pth"  # Файл сохраненной модели
DATASET_PATH = "dataset-resized"  # Папка с датасетом

# === ПРЕОБРАЗОВАНИЕ ИЗОБРАЖЕНИЙ ===
transform = transforms.Compose([
    transforms.Resize((128, 128)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

# === ЗАГРУЗКА ДАННЫХ ===
dataset = datasets.ImageFolder(root=DATASET_PATH, transform=transform)
class_names = dataset.classes
num_classes = len(class_names)
dataloader = DataLoader(dataset, batch_size=BATCH_SIZE, shuffle=True)


# === ОПРЕДЕЛЕНИЕ МОДЕЛИ ===
class CNN(nn.Module):
    def init(self, num_classes):
        super(CNN, self).init()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)
        self.fc1 = nn.Linear(128 * 16 * 16, 128)
        self.fc2 = nn.Linear(128, num_classes)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.pool(self.relu(self.conv1(x)))
        x = self.pool(self.relu(self.conv2(x)))
        x = self.pool(self.relu(self.conv3(x)))
        x = x.view(x.size(0), -1)
        x = self.relu(self.fc1(x))
        x = self.fc2(x)
        return x


# === СОЗДАНИЕ/ЗАГРУЗКА МОДЕЛИ ===
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = CNN(num_classes).to(device)

if os.path.exists(MODEL_PATH):
    model.load_state_dict(torch.load(MODEL_PATH))
    print(" Модель загружена!")
else:
    print("⚡️ Обучение модели...")
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)

    for epoch in range(EPOCHS):
        running_loss = 0.0
        for images, labels in dataloader:
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()

        print(f"Эпоха {epoch + 1}/{EPOCHS}, Потеря: {running_loss / len(dataloader):.4f}")

    torch.save(model.state_dict(), MODEL_PATH)
    print(" Модель обучена и сохранена!")

model.eval()  # Переключение в режим предсказания

# === НАСТРОЙКА TELEGRAM-БОТА ===
TOKEN = "7914076709:AAF9H6Tvh-PCBb3DudEhgnOcATZ4WQ8E0jk"
bot = TeleBot(TOKEN)


# === ОТПРАВКА СТАРТОВОГО СООБЩЕНИЯ ===
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "Привет! Отправь мне фото, и я скажу, есть ли на нём мусор.")


# === ОБРАБОТКА ФОТОГРАФИЙ ===
def detect_trash(image):
    image = Image.open(image)
    image = transform(image).unsqueeze(0).to(device)

    with torch.no_grad():
        outputs = model(image)
        _, predicted = torch.max(outputs, 1)
        confidence = torch.nn.functional.softmax(outputs, dim=1)[0][predicted.item()] * 100

    detected_class = class_names[predicted.item()]
    return detected_class, confidence.item()


# === ОБРАБОТКА ФОТОГРАФИЙ ОТ ПОЛЬЗОВАТЕЛЯ ===
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    image_path = f"temp.jpg"
    with open(image_path, "wb") as file:
        file.write(downloaded_file)

    detected_class, confidence = detect_trash(image_path)

Eugene, [15.02.2025 22:45]
# ДОбавляем текст на изображение
    image = cv2.imread(image_path)
    cv2.putText(image, f"{detected_class}: {confidence:.2f}%", (20, 40),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    annotated_image_path = "annotated.jpg"
    cv2.imwrite(annotated_image_path, image)

    with open(annotated_image_path, "rb") as photo:
        bot.send_photo(message.chat.id, photo, caption=f"Обнаружено: {detected_class}\nУверенность: {confidence:.2f}%")


# === ЗАПУСК БОТА ===
bot.polling(none_stop=True)
