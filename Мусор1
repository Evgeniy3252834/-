Eugene, [15.02.2025 22:44]
import os
import cv2
import time
import threading
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
from PIL import Image
from telebot import TeleBot, types

# === НАСТРОЙКИ ===
TOKEN = "7945651516:AAFYGlaXcqXqdiSvfnzmH3rxSvK3k_8E1_Q"  # Укажите ваш Telegram токен
FOLDER_PATH = "images_to_process"  # Папка с изображениями
DATASET_PATH = "dataset-resized"  # Папка с датасетом
MODEL_PATH = "model.pth"
EPOCHS = 5
BATCH_SIZE = 16
LEARNING_RATE = 0.001

# === ПРЕОБРАЗОВАНИЕ ИЗОБРАЖЕНИЙ ===
transform = transforms.Compose([
    transforms.Resize((128, 128)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

# === ЗАГРУЗКА ДАННЫХ ===
dataset = datasets.ImageFolder(root=DATASET_PATH, transform=transform)
class_names = dataset.classes
num_classes = len(class_names)
dataloader = DataLoader(dataset, batch_size=BATCH_SIZE, shuffle=True)

# === ОПРЕДЕЛЕНИЕ МОДЕЛИ ===
class CNN(nn.Module):
    def init(self, num_classes):
        super(CNN, self).init()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)
        self.fc1 = nn.Linear(128 * 16 * 16, 128)
        self.fc2 = nn.Linear(128, num_classes)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.pool(self.relu(self.conv1(x)))
        x = self.pool(self.relu(self.conv2(x)))
        x = self.pool(self.relu(self.conv3(x)))
        x = x.view(x.size(0), -1)
        x = self.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# === СОЗДАНИЕ/ЗАГРУЗКА МОДЕЛИ ===
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = CNN(num_classes).to(device)

if os.path.exists(MODEL_PATH):
    model.load_state_dict(torch.load(MODEL_PATH))
    print(" Модель загружена!")
else:
    print(" Обучение модели...")
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)

    for epoch in range(EPOCHS):
        running_loss = 0.0
        for images, labels in dataloader:
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()

        print(f"Эпоха {epoch + 1}/{EPOCHS}, Потеря: {running_loss / len(dataloader):.4f}")

    torch.save(model.state_dict(), MODEL_PATH)
    print(" Модель обучена и сохранена!")

model.eval()

# === НАСТРОЙКА TELEGRAM-БОТА ===
bot = TeleBot(TOKEN)
chat_id = None
processing_enabled = False

@bot.message_handler(commands=['start'])
def start_bot(message):
    global chat_id
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("▶️ Начать обработку")
    btn2 = types.KeyboardButton("⛔️ Остановить обработку")
    markup.add(btn1, btn2)
    bot.send_message(chat_id, "Привет! Бот готов к работе.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "▶️ Начать обработку")
def enable_processing(message):
    global processing_enabled, chat_id
    if chat_id is None:
        chat_id = message.chat.id

    if not processing_enabled:
        processing_enabled = True
        bot.send_message(chat_id, "✅ Обработка изображений запущена!")
        threading.Thread(target=process_images, daemon=True).start()
    else:
        bot.send_message(chat_id, "⚠️ Обработка уже выполняется.")

@bot.message_handler(func=lambda message: message.text == "⛔️ Остановить обработку")
def disable_processing(message):
    global processing_enabled, chat_id
    if chat_id is None:
        chat_id = message.chat.id

    processing_enabled = False
    bot.send_message(chat_id, "❌ Обработка остановлена.")

Eugene, [15.02.2025 22:44]
# === ФУНКЦИЯ ОБРАБОТКИ ИЗОБРАЖЕНИЙ ===
def detect_trash(image_path):
    if not os.path.exists(image_path):
        return None, None

    try:
        pil_image = Image.open(image_path)
    except Exception:
        return None, None

    image_tensor = transform(pil_image).unsqueeze(0).to(device)

    with torch.no_grad():
        outputs = model(image_tensor)
        _, predicted = torch.max(outputs, 1)
        confidence = torch.nn.functional.softmax(outputs, dim=1)[0][predicted.item()] * 100

    confidence_text = f"Мусор найден, уверенность:{confidence:.2f}%"

    return confidence_text, image_path

# === ОСНОВНОЙ ЦИКЛ ОБРАБОТКИ ===
def process_images():
    global processing_enabled, chat_id
    processed_images = set()

    while True:
        if not processing_enabled:
            time.sleep(2)
            continue

        files_in_folder = [f for f in os.listdir(FOLDER_PATH) if f.endswith(('.jpg', '.jpeg', '.png'))]
        if not files_in_folder:
            time.sleep(5)
            continue

        for file_name in files_in_folder:
            if not processing_enabled:
                break

            file_path = os.path.join(FOLDER_PATH, file_name)
            if file_path in processed_images:
                continue

            processed_images.add(file_path)
            confidence_text, image_path = detect_trash(file_path)

            if confidence_text and image_path and chat_id is not None:
                with open(image_path, "rb") as img_file:
                    bot.send_photo(chat_id, img_file, caption=confidence_text)

            time.sleep(10)

# === ЗАПУСК БОТА ===
bot.polling(none_stop=True)
