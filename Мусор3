import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import telebot
import cv2
import os
import time
from collections import defaultdict

# === ПОДКЛЮЧАЕМ TELEGRAM БОТА ===
TOKEN = "7914076709:AAF9H6Tvh-PCBb3DudEhgnOcATZ4WQ8E0jk"
bot = telebot.TeleBot(TOKEN)
chat_id = None  
notifications_enabled = False  
found_trash = set() 
trash_count = defaultdict(int)  

# === ПОДГОТОВКА МОДЕЛИ ===
data_dir = "dataset-resized"
transform = transforms.Compose([
    transforms.Resize((128, 128)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

dataset = datasets.ImageFolder(root=data_dir, transform=transform)
class_names = dataset.classes
num_classes = len(class_names)

class CNN(nn.Module):
    def __init__(self, num_classes):
        super(CNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)
        self.fc1_input_size = 128 * (128 // 8) * (128 // 8)
        self.fc1 = nn.Linear(self.fc1_input_size, 128)
        self.fc2 = nn.Linear(128, num_classes)
        self.relu = nn.ReLU()
    
    def forward(self, x):
        x = self.pool(self.relu(self.conv1(x)))
        x = self.pool(self.relu(self.conv2(x)))
        x = self.pool(self.relu(self.conv3(x)))
        x = x.view(x.size(0), -1)
        x = self.relu(self.fc1(x))
        x = self.fc2(x)
        return x

model = CNN(num_classes)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)
model.load_state_dict(torch.load("model.pth", map_location=device))  
model.eval()

# === ФУНКЦИЯ ОБНАРУЖЕНИЯ МУСОРА ===
def detect_trash(image_path):
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = cv2.resize(image, (128, 128))
    image = transform(image).unsqueeze(0).to(device)
    
    with torch.no_grad():
        outputs = model(image)
        _, predicted = torch.max(outputs, 1)
    
    return class_names[predicted.item()]

# === ОБРАБОТКА ВИДЕО ===
def process_video(video_path):
    global found_trash, trash_count
    cap = cv2.VideoCapture(video_path)
    frame_rate = 30  
    frame_count = 0
    
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        
        if frame_count % (frame_rate * 30) == 0:  
            image_path = "temp_frame.jpg"
            cv2.imwrite(image_path, frame)
            detected_trash = detect_trash(image_path)
            
            if detected_trash not in found_trash:
                found_trash.add(detected_trash)
                trash_count[detected_trash] += 1
                if notifications_enabled:
                    bot.send_message(chat_id, f"Обнаружен новый мусор: {detected_trash} \nВсего: {trash_count[detected_trash]}")
                    bot.send_photo(chat_id, open(image_path, 'rb'))
        
        frame_count += 1
    
    cap.release()
    cv2.destroyAllWindows()

# === TELEGRAM БОТ: КОМАНДЫ ===
@bot.message_handler(commands=['start'])
def start_bot(message):
    global chat_id
    chat_id = message.chat.id
    bot.send_message(chat_id, "Бот запущен! Используйте /enable для уведомлений.")

@bot.message_handler(commands=['enable'])
def enable_notifications(message):
    global notifications_enabled
    notifications_enabled = True
    bot.send_message(chat_id, "Уведомления включены!")

@bot.message_handler(commands=['disable'])
def disable_notifications(message):
    global notifications_enabled
    notifications_enabled = False
    bot.send_message(chat_id, "Уведомления отключены!")

@bot.message_handler(commands=['process'])
def process_command(message):
    bot.send_message(chat_id, "Начинаю обработку видео...")
    process_video("video.mp4")  # Замените на путь к вашему видео
    bot.send_message(chat_id, "Обработка завершена!")

bot.polling(none_stop=True)
